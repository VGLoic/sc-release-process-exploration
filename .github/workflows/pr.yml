name: Pull Request workflow

on:
  pull_request:

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  simulate-release:
    name: "Simulate Release"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.13
      - name: Install dependencies
        run: yarn
      - name: Create temporary release artifacts
        run: yarn compile
      - name: Compile scripts
        run: yarn scripts:compile
      - name: Create diff between artifacts and latest release
        uses: actions/github-script@v7
        id: artifacts-diff
        with:
          script: |
            const { generateDiffWithLatest } = await import('${{ github.workspace }}/dist/diff-with-latest.js');
            const diff = await generateDiffWithLatest();
            return diff;
      - name: Create or update comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const existingBotComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Release Plan Output')
            });
            // 2. Create new comment with diff
            let output = `#### Release Plan Output
                \`\`\`
                Diff: ${{ steps.artifacts-diff.outputs.result }}
                \`\`\`
                `;
            output += diff;          
            output += \`\`\`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
            // 3. Delete previous comment so PR timeline makes sense
            if (existingBotComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingBotComment.id,
              });
            }
